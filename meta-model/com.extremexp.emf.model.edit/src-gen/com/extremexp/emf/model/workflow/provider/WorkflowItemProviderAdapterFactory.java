/**
 */
package com.extremexp.emf.model.workflow.provider;

import com.extremexp.emf.model.workflow.util.WorkflowAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowItemProviderAdapterFactory extends WorkflowAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WorkflowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Workflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowItemProvider workflowItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Workflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowAdapter() {
		if (workflowItemProvider == null) {
			workflowItemProvider = new WorkflowItemProvider(this);
		}

		return workflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.ExternalInputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalInputDataItemProvider externalInputDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.ExternalInputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalInputDataAdapter() {
		if (externalInputDataItemProvider == null) {
			externalInputDataItemProvider = new ExternalInputDataItemProvider(this);
		}

		return externalInputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.IntermediateInputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntermediateInputDataItemProvider intermediateInputDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.IntermediateInputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntermediateInputDataAdapter() {
		if (intermediateInputDataItemProvider == null) {
			intermediateInputDataItemProvider = new IntermediateInputDataItemProvider(this);
		}

		return intermediateInputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.OutputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputDataItemProvider outputDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.OutputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputDataAdapter() {
		if (outputDataItemProvider == null) {
			outputDataItemProvider = new OutputDataItemProvider(this);
		}

		return outputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Metric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricItemProvider metricItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Metric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricAdapter() {
		if (metricItemProvider == null) {
			metricItemProvider = new MetricItemProvider(this);
		}

		return metricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.DynamicParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynamicParameterItemProvider dynamicParameterItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.DynamicParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynamicParameterAdapter() {
		if (dynamicParameterItemProvider == null) {
			dynamicParameterItemProvider = new DynamicParameterItemProvider(this);
		}

		return dynamicParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.StaticParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticParameterItemProvider staticParameterItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.StaticParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticParameterAdapter() {
		if (staticParameterItemProvider == null) {
			staticParameterItemProvider = new StaticParameterItemProvider(this);
		}

		return staticParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Array} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayItemProvider arrayItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Array}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayAdapter() {
		if (arrayItemProvider == null) {
			arrayItemProvider = new ArrayItemProvider(this);
		}

		return arrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Structure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureItemProvider structureItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Structure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureAdapter() {
		if (structureItemProvider == null) {
			structureItemProvider = new StructureItemProvider(this);
		}

		return structureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.ConditionalLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalLinkItemProvider conditionalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.ConditionalLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalLinkAdapter() {
		if (conditionalLinkItemProvider == null) {
			conditionalLinkItemProvider = new ConditionalLinkItemProvider(this);
		}

		return conditionalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.RegularLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegularLinkItemProvider regularLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.RegularLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegularLinkAdapter() {
		if (regularLinkItemProvider == null) {
			regularLinkItemProvider = new RegularLinkItemProvider(this);
		}

		return regularLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.ExceptionalLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExceptionalLinkItemProvider exceptionalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.ExceptionalLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExceptionalLinkAdapter() {
		if (exceptionalLinkItemProvider == null) {
			exceptionalLinkItemProvider = new ExceptionalLinkItemProvider(this);
		}

		return exceptionalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.UI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIItemProvider uiItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.UI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIAdapter() {
		if (uiItemProvider == null) {
			uiItemProvider = new UIItemProvider(this);
		}

		return uiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.MetaData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaDataItemProvider metaDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.MetaData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetaDataAdapter() {
		if (metaDataItemProvider == null) {
			metaDataItemProvider = new MetaDataItemProvider(this);
		}

		return metaDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Parallel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelItemProvider parallelItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Parallel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelAdapter() {
		if (parallelItemProvider == null) {
			parallelItemProvider = new ParallelItemProvider(this);
		}

		return parallelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Exclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExclusiveItemProvider exclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Exclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExclusiveAdapter() {
		if (exclusiveItemProvider == null) {
			exclusiveItemProvider = new ExclusiveItemProvider(this);
		}

		return exclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Inclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InclusiveItemProvider inclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Inclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInclusiveAdapter() {
		if (inclusiveItemProvider == null) {
			inclusiveItemProvider = new InclusiveItemProvider(this);
		}

		return inclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.Complex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexItemProvider complexItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.Complex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexAdapter() {
		if (complexItemProvider == null) {
			complexItemProvider = new ComplexItemProvider(this);
		}

		return complexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.ParallelJoin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelJoinItemProvider parallelJoinItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.ParallelJoin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelJoinAdapter() {
		if (parallelJoinItemProvider == null) {
			parallelJoinItemProvider = new ParallelJoinItemProvider(this);
		}

		return parallelJoinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.ExclusiveJoin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExclusiveJoinItemProvider exclusiveJoinItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.ExclusiveJoin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExclusiveJoinAdapter() {
		if (exclusiveJoinItemProvider == null) {
			exclusiveJoinItemProvider = new ExclusiveJoinItemProvider(this);
		}

		return exclusiveJoinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.InclusiveJoin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InclusiveJoinItemProvider inclusiveJoinItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.InclusiveJoin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInclusiveJoinAdapter() {
		if (inclusiveJoinItemProvider == null) {
			inclusiveJoinItemProvider = new InclusiveJoinItemProvider(this);
		}

		return inclusiveJoinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.ComplexJoin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexJoinItemProvider complexJoinItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.ComplexJoin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexJoinAdapter() {
		if (complexJoinItemProvider == null) {
			complexJoinItemProvider = new ComplexJoinItemProvider(this);
		}

		return complexJoinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.EventNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventNodeItemProvider eventNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.EventNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventNodeAdapter() {
		if (eventNodeItemProvider == null) {
			eventNodeItemProvider = new EventNodeItemProvider(this);
		}

		return eventNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.extremexp.emf.model.workflow.PrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveTypeItemProvider primitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.extremexp.emf.model.workflow.PrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveTypeAdapter() {
		if (primitiveTypeItemProvider == null) {
			primitiveTypeItemProvider = new PrimitiveTypeItemProvider(this);
		}

		return primitiveTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (workflowItemProvider != null)
			workflowItemProvider.dispose();
		if (externalInputDataItemProvider != null)
			externalInputDataItemProvider.dispose();
		if (intermediateInputDataItemProvider != null)
			intermediateInputDataItemProvider.dispose();
		if (outputDataItemProvider != null)
			outputDataItemProvider.dispose();
		if (metricItemProvider != null)
			metricItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (dynamicParameterItemProvider != null)
			dynamicParameterItemProvider.dispose();
		if (staticParameterItemProvider != null)
			staticParameterItemProvider.dispose();
		if (arrayItemProvider != null)
			arrayItemProvider.dispose();
		if (structureItemProvider != null)
			structureItemProvider.dispose();
		if (fieldItemProvider != null)
			fieldItemProvider.dispose();
		if (taskItemProvider != null)
			taskItemProvider.dispose();
		if (conditionalLinkItemProvider != null)
			conditionalLinkItemProvider.dispose();
		if (regularLinkItemProvider != null)
			regularLinkItemProvider.dispose();
		if (exceptionalLinkItemProvider != null)
			exceptionalLinkItemProvider.dispose();
		if (uiItemProvider != null)
			uiItemProvider.dispose();
		if (groupItemProvider != null)
			groupItemProvider.dispose();
		if (metaDataItemProvider != null)
			metaDataItemProvider.dispose();
		if (parallelItemProvider != null)
			parallelItemProvider.dispose();
		if (exclusiveItemProvider != null)
			exclusiveItemProvider.dispose();
		if (inclusiveItemProvider != null)
			inclusiveItemProvider.dispose();
		if (complexItemProvider != null)
			complexItemProvider.dispose();
		if (parallelJoinItemProvider != null)
			parallelJoinItemProvider.dispose();
		if (exclusiveJoinItemProvider != null)
			exclusiveJoinItemProvider.dispose();
		if (inclusiveJoinItemProvider != null)
			inclusiveJoinItemProvider.dispose();
		if (complexJoinItemProvider != null)
			complexJoinItemProvider.dispose();
		if (eventNodeItemProvider != null)
			eventNodeItemProvider.dispose();
		if (primitiveTypeItemProvider != null)
			primitiveTypeItemProvider.dispose();
	}

}
